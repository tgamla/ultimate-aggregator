import { BaseQuery } from './basePrototypes/baseQuery';
import { IConfig } from './interfaces/iConfig';
import { IQuery } from './interfaces/iQuery';
export declare class Query<T> extends BaseQuery<Query<T>> implements IQuery<T> {
    _preFilter: string;
    private preFiltering;
    private dataSource;
    private changed;
    private context;
    private logger;
    private debugLevel;
    private groupMap;
    private groupComposition;
    private groupingComposition;
    private allExpressions;
    private quotes;
    private fn;
    private code;
    constructor(config?: IConfig);
    config(config: IConfig): Query<T>;
    addContext(reference: object | Function | string, value?: any): Query<T>;
    removeContext(reference: string | object): Query<T>;
    preFilter(filter?: string): Query<T>;
    preOrderBy(): Query<T>;
    define(): Query<T>;
    select(...args: any[]): Query<T>;
    from(dataSource?: any): Query<T>;
    distinct(apply?: boolean): Query<T>;
    groupBy(rawGrouping?: string | string[]): Query<T>;
    totals(): Query<T>;
    filter(rawFilter?: string): Query<T>;
    orderBy(rawSorting?: string | string[]): Query<T>;
    range(start: number, end?: number): Query<T>;
    clone(): Query<T>;
    toList(): T;
    toObject(): T;
    toValue(): any;
    execute(dataSource?: any): T;
    toString(): string;
    static fromDefinition<T>(definition: string | Object): Query<T>;
    protected encapsulate(): Query<T>;
    private applyChange;
    private execPreFiltering;
    private calculate;
    private init;
    private createFn;
    private bindFn;
    private hasQueryGrouping;
    private hasAnyPrimalAggregationNonOver;
    private hasAnySubGroup;
    private hasAnyGroupDistinct;
    private defineAllDeclaration;
    private defineMainGroupingDeclaration;
    private defineAllVariableDeclarations;
    private defineAggregationIterators;
    private getExpAggregationsByLevels;
    private defineUngroups;
    private getUngroups;
    private defineGroupsPostProcessing;
    private createGroupComposition;
    private parseSelection;
    private handleMeaninglessSelection;
    private parseGrouping;
    private parseSorting;
    private parseFilter;
    private addFunction;
    private getGroupMap;
    private defineNonGroupedPostProcessing;
    private definePlainResultSet;
    private defineGroupedResultSet;
    private defineResultSet;
    private defineExpressionsPostProcessing;
    private defineComparators;
    private compareDataSourceType;
    private logExpressions;
    private static defineExpAggregations;
    private static defineSelection;
}
